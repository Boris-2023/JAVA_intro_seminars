import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Task05 {
    // –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
    // üìå –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –≤ –≤–∏–¥–µ
    // –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫.
    // üìå –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—à–µ—Ç –º–∞—Å—Å–∏–≤, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    // –º–µ—Ç–æ–¥–æ–º –≤ —Ñ–∞–π–ª.
    // üìå –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ—à–∏–±–∫–∏ —Å –ø–æ–º–æ—â—å—é try-catch –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –í —Å–ª—É—á–∞–µ
    // –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–æ–≥-—Ñ–∞–π–ª.

    // –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6 (–¥–æ–ø)
    // üìå –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ) —Ñ–∞–π–ª–æ–≤ –∏–∑
    // —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏ –∏ –≤—ã–≤–µ–¥–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–¥–∞
    // 1 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: txt
    // 2 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: pdf
    // 3 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞:
    // 4 –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: jpg

    // public static List <String> fileName(String DirPath){
    //     List <String> fNames = ArrayList<>();
    //     File directory = new File(DirPath);
    //     if(directory.isDirectory()){
    //         for(File item: directory.listFiles()){//access to each file
    //             fNames.add(item.getName());

    //             //print the extensions - task 6
    //             try{//as extention may be absent!
    //                 System.out.println(item.getName().substring(item.getName().lastIndexOf('.')));
    //             } catch{
    //                 System.out.println("No extention!");
    //             }
    //         }
    //     }

    //     return fNames;
    // }

   //Vladimir
    public static String[] getCrntFldrCnts() {
        File folder = new File(".");
        return folder.list();
    }

    public static void wrtArrToFile(String[] array, String fileName) throws IOException {
        try (FileWriter writer = new FileWriter(fileName)) {
            for (String item : array) {
                writer.write(item);
                writer.write(System.lineSeparator());
            }
            System.out.println("–£—Å–ø–µ—Ö.");
        }
    }

    public static void dtrmFileExts(String[] folderContents) {
        int count = 1;
        for (String fileName : folderContents) {
            File file = new File(fileName);
            if (file.isFile()) {
                String extension = getExt(fileName);
                System.out.printf("%d –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: %s%n", count++, extension);
            }
        }
    }

    public static String getExt(String fileName) {
        int dotIndex = fileName.lastIndexOf('.');
        if (dotIndex == -1) {
            return "";
        } else {
            return fileName.substring(dotIndex + 1);
        }
    }

    public static void wrtExcptToLogFile(Exception e, String fileName) {
        try (FileWriter writer = new FileWriter(fileName)) {
            writer.write(e.toString());
            writer.write(System.lineSeparator());
            StackTraceElement[] stackTrace = e.getStackTrace();
            for (StackTraceElement element : stackTrace) {
                writer.write(element.toString());
                writer.write(System.lineSeparator());
            }
            System.out.println("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥.");
        } catch (IOException ex) {
            System.err.println("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: " + ex.getMessage());
        }
    }

}
